# -*- coding: utf-8 -*-
"""Pronostico elecciones

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/138aMdfOfM7KN6CQGx7WSuL5OoCOXed17
"""

# SIMULADOR ELECTORAL PARA GENERAL ALVARADO - VERSIÓN COLAB CON GRÁFICOS
# Incluye fuente Montserrat Bold para estilo de marketing

# Instalación de dependencias necesarias
!pip install fpdf matplotlib
!pip install --upgrade fpdf2
!pip install requests
!sudo apt-get install -y fonts-dejavu

from fpdf import FPDF
import matplotlib.pyplot as plt
import numpy as np
from google.colab import files
import io
import os
import tempfile
from datetime import datetime
import matplotlib.font_manager as fm

# ===================== FUNCIONES PRINCIPALES =====================

def calcular_distribucion_bancas(votos_partidos, blancos_nulos, total_bancas, piso_porcentual, es_consejeros=False):
    """
    Calcula la distribución de bancas según el método Hare, con regla especial para consejeros escolares.
    """
    votos_afirmativos = sum(votos_partidos.values())

    # Caso especial: Si no hay votos afirmativos
    if votos_afirmativos == 0:
        return {
            "bancas": {partido: 0 for partido in votos_partidos},
            "detalle": {
                "votos_afirmativos": 0,
                "cociente": 0,
                "piso_electoral": 0,
                "partidos_validos": [],
                "restos": {},
                "bancas_restantes": total_bancas,
                "asignacion_especial": ""
            }
        }

    piso_electoral = (piso_porcentual / 100) * votos_afirmativos

    # Caso especial para consejeros escolares: Si ningún partido supera el piso
    if es_consejeros:
        partidos_validos = [p for p in votos_partidos if votos_partidos[p] >= piso_electoral]
        if not partidos_validos:
            # Asignar todas las bancas al partido con más votos
            partido_ganador = max(votos_partidos, key=votos_partidos.get)
            bancas_especial = {partido: total_bancas if partido == partido_ganador else 0
                              for partido in votos_partidos}

            return {
                "bancas": bancas_especial,
                "detalle": {
                    "votos_afirmativos": votos_afirmativos,
                    "cociente": 0,
                    "piso_electoral": piso_electoral,
                    "partidos_validos": [],
                    "restos": {},
                    "bancas_restantes": total_bancas,
                    "asignacion_especial": f"¡ASIGNACIÓN ESPECIAL! Todas las bancas a {partido_ganador} (partido más votado)"
                }
            }

    # Cociente Hare
    cociente = votos_afirmativos / total_bancas

    # Bancas iniciales y restos
    bancas = {}
    restos = {}
    for partido, votos in votos_partidos.items():
        bancas[partido] = int(votos // cociente)
        restos[partido] = votos % cociente

    # Bancas restantes
    bancas_restantes = int(total_bancas - sum(bancas.values()))

    # Asignación por mayor resto (solo partidos que superan el piso)
    partidos_validos = [p for p in votos_partidos if votos_partidos[p] >= piso_electoral]

    # Ordenar por resto (and by total votes in case of a tie)
    partidos_ordenados = sorted(
        partidos_validos,
        key=lambda p: (-restos[p], -votos_partidos[p])
    )

    # Asignar bancas restantes
    for i in range(bancas_restantes):
        if i < len(partidos_ordenados):
            partido = partidos_ordenados[i]
            bancas[partido] += 1
        elif partidos_validos:  # If there are remaining benches and valid parties
            # Assign to the valid party with the most votes
            partido_mas_votos = max(partidos_validos, key=lambda p: votos_partidos[p])
            bancas[partido_mas_votos] += 1

    # Ensure 0 benches for excluded parties
    for partido in votos_partidos:
        if partido not in bancas:
            bancas[partido] = 0

    return {
        "bancas": bancas,
        "detalle": {
            "votos_afirmativos": votos_afirmativos,
            "cociente": cociente,
            "piso_electoral": piso_electoral,
            "partidos_validos": partidos_validos,
            "restos": restos,
            "bancas_restantes": bancas_restantes,
            "asignacion_especial": ""
        }
    }

def generar_pdf_con_graficos(votos_totales, blancos_nulos, votos_partidos,
                           resultado_concejales, resultado_consejeros,
                           participacion_porcentual, filename="pronostico_electoral.pdf"):
    """Genera un PDF profesional con gráficos de resultados"""
    # Configuración de colores para los partidos (updated)
    colores_partidos = {
        "Fuerza Patria": "#0000FF",  # Azul
        "UCR": "#FF0000",            # Rojo
        "LLA": "#EE82EE",            # Violeta
        "Es Ahora": "#87CEEB",       # Celeste
        "Potencia BA - Accion Alvarado": "#A0522D",  # Marron
        "FIT": "#800000",            # Bordo
        "URGA": "#FFC0CB"            # Rosa
    }

    # Ordenar partidos por cantidad de votos (para gráficos)
    partidos_ordenados = sorted(votos_partidos.keys(), key=lambda x: -votos_partidos[x])

    # Try to find a marketing-friendly font
    font_path = fm.findfont(fm.FontProperties(family='DejaVu Sans')) # Default to DejaVu Sans
    try:
        # Attempt to find a more visually appealing font
        # You can try other common fonts available in Colab like 'Roboto', 'Open Sans', etc.
        # Find the font file path:
        # !fc-list : family style file spacing | grep -i "sans"
        # Then manually set font_path = '/path/to/font.ttf' if needed
        # For now, let's stick to DejaVu Sans as a safe option
        pass
    except:
        print("Warning: Could not find a marketing-friendly font. Using DejaVu Sans.")
        pass

    plt.rcParams['font.family'] = fm.FontProperties(fname=font_path).get_name()


    # Crear PDF
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    # ========== PORTADA ==========
    pdf.set_font("Arial", 'B', 20)
    pdf.cell(200, 15, txt="PRONÓSTICO ELECTORAL", ln=1, align='C')
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(200, 10, txt="General Alvarado 2024", ln=1, align='C')
    pdf.ln(15)

    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt=f"Fecha de generación: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}", ln=1)
    pdf.ln(10)

    # ========== DATOS NUMÉRICOS ==========
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(200, 10, txt="1. Datos Numéricos Detallados", ln=1)
    pdf.ln(8)

    # Datos básicos
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(200, 10, txt="Participación Electoral", ln=1)
    pdf.set_font("Arial", size=12)

    pdf.cell(200, 8, txt=f"- Participación estimada: {participacion_porcentual:.1f}%", ln=1)
    pdf.cell(200, 8, txt=f"- Votos totales: {votos_totales:,}".replace(",", "."), ln=1)
    pdf.cell(200, 8, txt=f"- Votos blancos/nulos: {blancos_nulos:,} ({blancos_nulos/votos_totales*100:.2f}%)".replace(",", "."), ln=1)
    votos_afirmativos_total = sum(votos_partidos.values())
    pdf.cell(200, 8, txt=f"- Votos afirmativos: {votos_afirmativos_total:,} ({votos_afirmativos_total/votos_totales*100:.2f}%)".replace(",", "."), ln=1)
    pdf.ln(10)

    # Resultados por partido
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(200, 10, txt="Resultados por Partido", ln=1)
    pdf.set_font("Arial", size=12)

    for partido in partidos_ordenados:
        porcentaje_votos = votos_partidos[partido]/votos_afirmativos_total*100 if votos_afirmativos_total > 0 else 0
        concejales_bancas = resultado_concejales['bancas'][partido] if resultado_concejales and 'bancas' in resultado_concejales and partido in resultado_concejales['bancas'] else 0
        consejeros_bancas = resultado_consejeros['bancas'][partido] if resultado_consejeros and 'bancas' in resultado_consejeros and partido in resultado_consejeros['bancas'] else 0

        pdf.cell(200, 8,
                txt=f"- {partido}: {votos_partidos[partido]:,} votos ({porcentaje_votos:.2f}%) | Concejales: {concejales_bancas} | Consejeros: {consejeros_bancas}".replace(",", "."),
                ln=1)

    # Notas especiales
    if resultado_consejeros and 'detalle' in resultado_consejeros and resultado_consejeros['detalle']['asignacion_especial']:
        pdf.ln(10)
        pdf.set_font("Arial", 'I', 12)
        pdf.cell(200, 8, txt="Nota: " + resultado_consejeros['detalle']['asignacion_especial'], ln=1)
    elif resultado_concejales and 'detalle' in resultado_concejales and resultado_concejales['detalle']['asignacion_especial']:
         pdf.ln(10)
         pdf.set_font("Arial", 'I', 12)
         pdf.cell(200, 8, txt="Nota: " + resultado_concejales['detalle']['asignacion_especial'], ln=1)


    pdf.add_page() # Add a page break

    # ========== GRÁFICO 1: Distribución de Votos (Pie Chart) ==========
    plt.figure(figsize=(10, 10)) # Make figure square for a better pie chart
    partidos = partidos_ordenados
    votos = [votos_partidos[p] for p in partidos]
    colores = [colores_partidos.get(p, "#CCCCCC") for p in partidos] # Use grey for parties without a defined color

    # Add percentages and labels to the pie chart
    plt.pie(votos, labels=partidos, colors=colores, autopct='%1.1f%%', startangle=140)
    plt.title('Distribución de Votos por Partido', fontsize=14, pad=20) # Removed "(Gráfico de Torta)"
    plt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle.

    plt.tight_layout()

    # Save chart to temporary file
    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmpfile:
        plt.savefig(tmpfile.name, format='png', dpi=150, bbox_inches='tight')
        plot_votos_path = tmpfile.name
    plt.close()

    # Insert into PDF
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(200, 10, txt="2. Distribución de Votos", ln=1) # Updated title in PDF
    pdf.ln(5)
    pdf.image(plot_votos_path, x=10, w=190) # Adjust width as needed
    pdf.ln(10)

    # Delete temporary file
    os.unlink(plot_votos_path)

    pdf.add_page() # Add a page break

    # ========== GRÁFICO 2: Bancas de Concejales (Bar Chart) ==========
    plt.figure(figsize=(12, 6))
    if resultado_concejales and 'bancas' in resultado_concejales:
        # Filter out parties with 0 benches
        partidos_con_bancas_concejales = [p for p in partidos_ordenados if resultado_concejales['bancas'].get(p, 0) > 0]
        bancas_concejal = [resultado_concejales['bancas'].get(p, 0) for p in partidos_con_bancas_concejales]
        colores_concejales = [colores_partidos.get(p, "#CCCCCC") for p in partidos_con_bancas_concejales]
    else:
        partidos_con_bancas_concejales = []
        bancas_concejal = []
        colores_concejales = []


    if partidos_con_bancas_concejales:
      # Adjust bar width based on the number of bars
      bar_width = 0.8
      if len(partidos_con_bancas_concejales) == 1:
          bar_width = 0.3 # Smaller width for a single bar

      bars = plt.bar(partidos_con_bancas_concejales, bancas_concejal, color=colores_concejales, width=bar_width) # Use .get with a default color
      plt.title('Distribución de Bancas de Concejales (8 bancas - Piso 12.5%)', fontsize=14, pad=20)
      plt.ylabel('Bancas', fontsize=12)
      plt.xticks(rotation=45, ha='right')

      for bar in bars:
          height = bar.get_height()
          plt.text(bar.get_x() + bar.get_width()/2., height,
                  f'{int(height)}',
                  ha='center', va='bottom', fontsize=10)
      plt.tight_layout()

      with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmpfile:
          plt.savefig(tmpfile.name, format='png', dpi=150, bbox_inches='tight')
          plot_concejales_path = tmpfile.name
      plt.close()

      pdf.set_font("Arial", 'B', 16)
      pdf.cell(200, 10, txt="3. Bancas de Concejales", ln=1)
      pdf.ln(5)
      pdf.image(plot_concejales_path, x=10, w=190)
      pdf.ln(10)

      os.unlink(plot_concejales_path)
    else:
      pdf.set_font("Arial", 'B', 16)
      pdf.cell(200, 10, txt="3. Bancas de Concejales", ln=1)
      pdf.ln(5)
      pdf.set_font("Arial", 'I', 12)
      pdf.cell(200, 10, txt="Ningún partido obtuvo bancas de concejales.", ln=1)
      pdf.ln(10)

    pdf.add_page() # Add a page break


    # ========== GRÁFICO 3: Bancas de Consejeros Escolares (Pie Chart) ==========
    plt.figure(figsize=(10, 10)) # Make figure square for a better pie chart
    if resultado_consejeros and 'bancas' in resultado_consejeros:
        # Filter out parties with 0 benches
        partidos_con_bancas_consejeros = [p for p in partidos_ordenados if resultado_consejeros['bancas'].get(p, 0) > 0]
        bancas_consejero = [resultado_consejeros['bancas'].get(p, 0) for p in partidos_con_bancas_consejeros]
        colores_consejeros = [colores_partidos.get(p, "#CCCCCC") for p in partidos_con_bancas_consejeros]
    else:
         partidos_con_bancas_consejeros = []
         bancas_consejero = []
         colores_consejeros = []

    if partidos_con_bancas_consejeros:
      plt.pie(bancas_consejero, labels=partidos_con_bancas_consejeros, colors=colores_consejeros, autopct='%1.1f%%', startangle=140)
      plt.title('Distribución de Bancas de Consejeros Escolares (3 bancas - Piso 33.3%)', fontsize=14, pad=20)
      plt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle.

      plt.tight_layout()

      with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmpfile:
          plt.savefig(tmpfile.name, format='png', dpi=150, bbox_inches='tight')
          plot_consejeros_path = tmpfile.name
      plt.close()

      pdf.set_font("Arial", 'B', 16)
      pdf.cell(200, 10, txt="4. Bancas de Consejeros Escolares", ln=1)
      pdf.ln(5)
      pdf.image(plot_consejeros_path, x=10, w=190)
      pdf.ln(15)

      os.unlink(plot_consejeros_path)
    else:
      pdf.set_font("Arial", 'B', 16)
      pdf.cell(200, 10, txt="4. Bancas de Consejeros Escolares", ln=1)
      pdf.ln(5)
      pdf.set_font("Arial", 'I', 12)
      pdf.cell(200, 10, txt="Ningún partido obtuvo bancas de consejeros escolares.", ln=1)
      pdf.ln(10)


    # Save PDF
    pdf_output_path = filename
    pdf.output(pdf_output_path)

    # Download automatically in Colab
    files.download(pdf_output_path)

    print(f"\n✅ PDF generado exitosamente: '{pdf_output_path}'")
    return pdf_output_path


def main():
    electores_totales = 40134

    # Predefined parties according to the last elections
    partidos_predefinidos = [
        "Fuerza Patria",
        "LLA",
        "UCR",
        "Es Ahora",
        "Potencia BA - Accion Alvarado",
        "FIT",
        "URGA"
    ]

    print("\n" + "="*60)
    print("SIMULADOR ELECTORAL - GENERAL ALVARADO 2024")
    print("="*60)
    print(f"Electores totales: {electores_totales:,}".replace(",", "."))
    print("\nPartidos participantes:")
    for i, partido in enumerate(partidos_predefinidos, 1):
        print(f"{i}. {partido}")

    # Configuration
    bancas_concejales = 8
    piso_concejales = 12.5  # %
    bancas_consejeros = 3
    piso_consejeros = 33.3  # %

    # Participation input
    while True:
        try:
            participacion_input = input("\nParticipación estimada (%): ").replace(",", ".")
            participacion_porcentual = float(participacion_input)
            participacion = participacion_porcentual / 100
            if not 0.01 <= participacion <= 1:
                raise ValueError
            break
        except ValueError:
            print("Error: Ingrese un porcentaje válido (ej: 55 o 55,5 para 55.5%).")

    votos_totales = int(electores_totales * participacion)
    print(f"\nVotos totales estimados: {votos_totales:,}".replace(",", "."))

    # Enter blank/null votes FIRST
    while True:
        try:
            blancos_input = input("\nVotos blancos/nulos: ").replace(",", "").replace(".", "")
            blancos_nulos = int(blancos_input)
            if blancos_nulos < 0 or blancos_nulos > votos_totales:
                print(f"Error: Debe ser entre 0 y {votos_totales:,}".replace(",", "."))
                continue
            break
        except ValueError:
            print("Error: Ingrese un número entero válido.")

    votos_disponibles = votos_totales - blancos_nulos
    print(f"\nVotos disponibles para partidos: {votos_disponibles:,}".replace(",", "."))

    # Enter votes by party with availability control
    votos_partidos = {}
    for i, partido in enumerate(partidos_predefinidos):
        while True:
            try:
                print(f"\nVotos disponibles restantes: {votos_disponibles:,}".replace(",", "."))
                if i == len(partidos_predefinidos) - 1:
                    print(f"{partido} (automático): {votos_disponibles:,} votos restantes".replace(",", "."))
                    votos = votos_disponibles
                else:
                    votos_input = input(f"{partido}: ").replace(",", "").replace(".", "")
                    votos = int(votos_input)
                    if votos < 0 or votos > votos_disponibles:
                        print(f"Error: Debe ser entre 0 y {votos_disponibles:,}".replace(",", "."))
                        continue

                votos_partidos[partido] = votos
                votos_disponibles -= votos
                break
            except ValueError:
                print("Error: Ingrese un número entero válido.")


    # Display percentages after loading
    votos_afirmativos = sum(votos_partidos.values())
    print("\n" + "="*60)
    print("RESUMEN DE VOTACIÓN (PORCENTAJES)")
    print("="*60)
    print(f"Votos totales: {votos_totales:,}".replace(",", "."))
    print(f"Votos afirmativos: {votos_afirmativos:,} ({votos_afirmativos/votos_totales*100:.2f}% del total)".replace(",", "."))
    print(f"Votos blancos/nulos: {blancos_nulos:,} ({blancos_nulos/votos_totales*100:.2f}% del total)".replace(",", "."))

    print("\nDistribución por partido (sobre votos afirmativos):")
    for partido in sorted(votos_partidos, key=lambda x: -votos_partidos[x]):
        porcentaje = votos_partidos[partido] / votos_afirmativos * 100 if votos_afirmativos > 0 else 0
        print(f"- {partido}: {votos_partidos[partido]:,} votos ({porcentaje:.2f}%)".replace(",", "."))

    # Calculate seats for council members
    resultado_concejales = calcular_distribucion_bancas(
        votos_partidos, blancos_nulos, bancas_concejales, piso_concejales
    )

    # Calculate seats for school council members (with special rule)
    resultado_consejeros = calcular_distribucion_bancas(
        votos_partidos, blancos_nulos, bancas_consejeros, piso_consejeros, es_consejeros=True
    )

    # Display results on screen
    def mostrar_resultados(resultado, cargo, piso):
        print("\n" + "="*60)
        print(f"REPARTO DE {cargo.upper()} (Piso: {piso}%)")
        print("="*60)

        if resultado is None or 'detalle' not in resultado:
             print(f"No se pudieron calcular los resultados para {cargo}.")
             # Also check if there's a specific reason like no parties meeting the floor
             if resultado and 'asignacion_especial' in resultado['detalle']:
                 print(resultado['detalle']['asignacion_especial'])
             return # Exit the function if no valid result

        # Proceed only if 'detalle' exists
        print(f"Votos afirmativos: {resultado['detalle']['votos_afirmativos']:,}".replace(",", "."))

        if resultado['detalle']['asignacion_especial']:
            print("\n" + resultado['detalle']['asignacion_especial'])
        else:
            print(f"Cociente Hare: {resultado['detalle']['cociente']:,.3f}".replace(",", "."))
            print(f"Piso electoral: {resultado['detalle']['piso_electoral']:,.1f} votos".replace(",", "."))

            print("\nPartidos válidos (superaron el piso):")
            validos = resultado['detalle']['partidos_validos']
            if validos:
                for partido in sorted(validos, key=lambda x: -votos_partidos[x]):
                    # Ensure 'restos' key exists and has the party before accessing
                    resto_display = resultado['detalle']['restos'].get(partido, 0) if 'restos' in resultado['detalle'] else 0
                    print(f"- {partido}: {votos_partidos[partido]:,} votos (resto: {resto_display:.3f})".replace(",", "."))
            else:
                print("Ningún partido superó el piso electoral")

            print("\nPartidos excluidos (no superaron el piso):")
            excluidos = [p for p in partidos_predefinidos if p not in validos]
            if excluidos:
                for partido in sorted(excluidos, key=lambda x: -votos_partidos[x]):
                    print(f"- {partido}: {votos_partidos[partido]:,} votos".replace(",", "."))
            else:
                print("Todos los partidos superaron el piso")

            print(f"\nBancas restantes después del cociente: {resultado['detalle']['bancas_restantes']}")

        print("\nDISTRIBUCIÓN FINAL DE BANCAS:")
        # Ensure 'bancas' key exists before iterating
        if 'bancas' in resultado:
            for partido in sorted(votos_partidos, key=lambda x: -votos_partidos[x]):
                # Ensure the party exists in the 'bancas' dictionary before accessing
                bancas_display = resultado['bancas'].get(partido, 0)
                print(f"{partido}: {bancas_display} bancas")
        else:
            print("No se assigned benches.")


    mostrar_resultados(resultado_concejales, "CONCEJALES", piso_concejales)
    mostrar_resultados(resultado_consejeros, "CONSEJEROS ESCOLARES", piso_consejeros)

    # Generate PDF with graphics
    if input("\n¿Desea generar un PDF con gráficos de los resultados? (s/n): ").lower() == 's':
        filename = input("Nombre del archivo PDF (presione Enter para 'pronostico_electoral.pdf'): ").strip()
        if not filename:
            filename = "pronostico_electoral.pdf"
        elif not filename.lower().endswith('.pdf'):
            filename += ".pdf"

        generar_pdf_con_graficos(
            votos_totales, blancos_nulos, votos_partidos,
            resultado_concejales, resultado_consejeros,
            participacion_porcentual,
            filename
        )


# Run the program
if __name__ == "__main__":
    print("="*60)
    print("SIMULADOR ELECTORAL PARA GENERAL ALVARADO".center(60))
    print("Versión Colab con Gráficos en PDF".center(60))
    print("="*60)

    while True:
        main()
        continuar = input("\n¿Realizar otra simulación? (s/n): ").lower()
        if continuar != 's':
            print("\n" + "="*60)
            print("¡Gracias por usar el simulador electoral!".center(60))
            print("="*60)
            break